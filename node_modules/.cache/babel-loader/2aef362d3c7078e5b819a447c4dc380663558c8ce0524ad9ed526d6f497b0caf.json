{"ast":null,"code":"var _jsxFileName = \"/home/abinesh/project/chatbot-flow-builder/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, MiniMap, Controls, Background, useNodes } from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport Button from '@mui/material/Button';\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  type: 'textMessage',\n  data: {\n    label: 'Text Message 1'\n  },\n  position: {\n    x: 250,\n    y: 5\n  }\n}];\nconst initialEdges = [];\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  _s();\n  const [nodes, setNodes] = useNodes(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const addNode = () => {\n    const newNode = {\n      id: id.toString(),\n      type: 'textMessage',\n      data: {\n        label: `Text Message ${id}`\n      },\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      }\n    };\n    id++;\n    setNodes(prevNodes => [...prevNodes, newNode]);\n  };\n  const handleNodeLabelChange = (nodeId, newLabel) => {\n    setNodes(prevNodes => prevNodes.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            label: newLabel\n          }\n        };\n      }\n      return node;\n    }));\n  };\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach(node => {\n      const nodeEdges = edges.filter(edge => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', {\n        nodes,\n        edges\n      });\n      // Save the flow logic here\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: validateFlow,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            elements: nodes.concat(edges),\n            onConnect: params => setEdges(prevEdges => addEdge(params, prevEdges)),\n            nodeTypes: {\n              textMessage: CustomNode\n            },\n            onElementClick: (event, element) => setSelectedNodeId(element.id),\n            snapToGrid: true,\n            children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [selectedNodeId && /*#__PURE__*/_jsxDEV(CustomNode, {\n          nodeId: selectedNodeId,\n          onLabelChange: handleNodeLabelChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-container\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: addNode,\n            children: \"Add Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n          \"aria-label\": \"minimum height\",\n          minRows: 3,\n          placeholder: \"Minimum 3 rows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"G9zRmosKiAHCgsK0tOzloN9XO3E=\", false, function () {\n  return [useNodes];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","ReactFlowProvider","addEdge","MiniMap","Controls","Background","useNodes","CustomNode","Button","TextareaAutosize","jsxDEV","_jsxDEV","initialNodes","id","type","data","label","position","x","y","initialEdges","App","_s","nodes","setNodes","edges","setEdges","selectedNodeId","setSelectedNodeId","addNode","newNode","toString","Math","random","prevNodes","handleNodeLabelChange","nodeId","newLabel","map","node","validateFlow","isValid","forEach","nodeEdges","filter","edge","source","target","length","alert","console","log","style","height","children","variant","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","elements","concat","onConnect","params","prevEdges","nodeTypes","textMessage","onElementClick","event","element","snapToGrid","onLabelChange","minRows","placeholder","_c","$RefreshReg$"],"sources":["/home/abinesh/project/chatbot-flow-builder/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  MiniMap,\n  Controls,\n  Background,\n  useNodes,\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport Button from '@mui/material/Button';\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\nimport './App.css';\n\nconst initialNodes = [\n  { id: '1', type: 'textMessage', data: { label: 'Text Message 1' }, position: { x: 250, y: 5 } },\n];\n\nconst initialEdges = [];\n\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  const [nodes, setNodes] = useNodes(initialNodes);\n  const [edges, setEdges] = useState(initialEdges);\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n\n  const addNode = () => {\n    const newNode = {\n      id: id.toString(),\n      type: 'textMessage',\n      data: { label: `Text Message ${id}` },\n      position: { x: Math.random() * 400, y: Math.random() * 400 },\n    };\n    id++;\n    setNodes((prevNodes) => [...prevNodes, newNode]);\n  };\n\n  const handleNodeLabelChange = (nodeId, newLabel) => {\n    setNodes((prevNodes) =>\n      prevNodes.map((node) => {\n        if (node.id === nodeId) {\n          return { ...node, data: { ...node.data, label: newLabel } };\n        }\n        return node;\n      })\n    );\n  };\n\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach((node) => {\n      const nodeEdges = edges.filter((edge) => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', { nodes, edges });\n      // Save the flow logic here\n    }\n  };\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <header>\n        <Button variant=\"outlined\" onClick={validateFlow}>Save</Button>\n      </header>\n      <div className=\"container\">\n        <div className=\"main\">\n          <ReactFlowProvider>\n            <ReactFlow\n              elements={nodes.concat(edges)}\n              onConnect={(params) => setEdges((prevEdges) => addEdge(params, prevEdges))}\n              nodeTypes={{ textMessage: CustomNode }}\n              onElementClick={(event, element) => setSelectedNodeId(element.id)}\n              snapToGrid={true}\n            >\n              <MiniMap />\n              <Controls />\n              <Background />\n            </ReactFlow>\n          </ReactFlowProvider>\n        </div>\n        <div className=\"sidebar\">\n          {selectedNodeId && (\n            <CustomNode\n              nodeId={selectedNodeId}\n              onLabelChange={handleNodeLabelChange}\n            />\n          )}\n          <div className=\"buttons-container\">\n            <Button variant=\"outlined\" onClick={addNode}>Add Node</Button>\n          </div>\n          <TextareaAutosize\n            aria-label=\"minimum height\"\n            minRows={3}\n            placeholder=\"Minimum 3 rows\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}