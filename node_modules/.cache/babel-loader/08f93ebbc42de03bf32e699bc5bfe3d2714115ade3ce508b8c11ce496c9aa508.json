{"ast":null,"code":"var _jsxFileName = \"/home/abinesh/project/chatbot-flow-builder/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport Button from '@mui/material/Button';\nimport './App.css';\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  textMessage: CustomNode,\n  selected: setIsselected\n};\nconst initialNodes = [{\n  id: '1',\n  type: 'textMessage',\n  data: {\n    label: 'Text Message 1'\n  },\n  position: {\n    x: 250,\n    y: 5\n  }\n}];\nconst initialEdges = [];\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [editedLabel, setEditedLabel] = useState('');\n  const [isSelected, setIsselected] = useState('');\n  const onConnect = params => setEdges(eds => addEdge(params, eds));\n  const onElementClick = (event, element) => setSelectedNode(element);\n  console.log(\"isSelectedLLL\", isSelected);\n  const addNode = () => {\n    const newNode = {\n      id: id.toString(),\n      type: 'textMessage',\n      data: {\n        label: `Text Message ${id}`\n      },\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      }\n    };\n    id++;\n    setNodes(nds => [...nds, newNode]);\n  };\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach(node => {\n      const nodeEdges = edges.filter(edge => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', {\n        nodes,\n        edges\n      });\n      // Save the flow logic here\n    }\n  };\n  const handleLabelChange = event => {\n    setEditedLabel(event.target.value);\n  };\n  const updateNodeLabel = () => {\n    if (selectedNode) {\n      const updatedNodes = nodes.map(node => {\n        if (node.id === selectedNode.id) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              label: editedLabel\n            }\n          };\n        }\n        return node;\n      });\n      setNodes(updatedNodes);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: validateFlow,\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            nodes: nodes,\n            edges: edges,\n            onNodesChange: onNodesChange,\n            onEdgesChange: onEdgesChange,\n            onConnect: onConnect,\n            onElementClick: onElementClick,\n            nodeTypes: nodeTypes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-container\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: addNode,\n            children: \"Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextareaAutosize, {\n          \"aria-label\": \"minimum height\",\n          minRows: 3,\n          placeholder: \"Minimum 3 rows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ysJyXlyNh/V7FVg5N9tsGXzBAcQ=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","ReactFlowProvider","addEdge","MiniMap","Controls","Background","useNodesState","useEdgesState","CustomNode","Button","TextareaAutosize","jsxDEV","_jsxDEV","nodeTypes","textMessage","selected","setIsselected","initialNodes","id","type","data","label","position","x","y","initialEdges","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","editedLabel","setEditedLabel","isSelected","onConnect","params","eds","onElementClick","event","element","console","log","addNode","newNode","toString","Math","random","nds","validateFlow","isValid","forEach","node","nodeEdges","filter","edge","source","target","length","alert","handleLabelChange","value","updateNodeLabel","updatedNodes","map","style","height","children","variant","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","minRows","placeholder","_c","$RefreshReg$"],"sources":["/home/abinesh/project/chatbot-flow-builder/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport Button from '@mui/material/Button';\nimport './App.css';\n\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\n\nconst nodeTypes = {\n  textMessage: CustomNode,\n  selected: setIsselected\n\n};\n\nconst initialNodes = [\n  { id: '1', type: 'textMessage', data: { label: 'Text Message 1' }, position: { x: 250, y: 5 } },\n];\n\nconst initialEdges = [];\n\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [editedLabel, setEditedLabel] = useState('');\n  const [isSelected, setIsselected] = useState('');\n\n  const onConnect = (params) => setEdges((eds) => addEdge(params, eds));\n  const onElementClick = (event, element) => setSelectedNode(element);\n  console.log(\"isSelectedLLL\", isSelected);\n\n  const addNode = () => {\n    const newNode = {\n      id: id.toString(),\n      type: 'textMessage',\n      data: { label: `Text Message ${id}` },\n      position: { x: Math.random() * 400, y: Math.random() * 400 },\n    };\n    id++;\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach((node) => {\n      const nodeEdges = edges.filter((edge) => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', { nodes, edges });\n      // Save the flow logic here\n    }\n  };\n\n  const handleLabelChange = (event) => {\n    setEditedLabel(event.target.value);\n  };\n\n  const updateNodeLabel = () => {\n    if (selectedNode) {\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === selectedNode.id) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              label: editedLabel,\n            },\n          };\n        }\n        return node;\n      });\n      setNodes(updatedNodes);\n    }\n  };\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <header>\n        <Button variant=\"outlined\" onClick={validateFlow}>Save Changes</Button>\n      </header>\n      <div className=\"container\">\n        <div className=\"main\">\n          <ReactFlowProvider>\n            <ReactFlow\n              nodes={nodes}\n              edges={edges}\n              onNodesChange={onNodesChange}\n              onEdgesChange={onEdgesChange}\n              onConnect={onConnect}\n              onElementClick={onElementClick}\n              nodeTypes={nodeTypes}\n            >\n              {/* <MiniMap /> */}\n              {/* <Controls /> */}\n              {/* <Background /> */}\n            </ReactFlow>\n          </ReactFlowProvider>\n        </div>\n        <div className=\"sidebar\">\n\n          <div className=\"buttons-container\">\n            <Button variant=\"outlined\" onClick={addNode}>Message</Button>\n          </div>\n          <TextareaAutosize\n            aria-label=\"minimum height\"\n            minRows={3}\n            placeholder=\"Minimum 3 rows\"\n          />\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}