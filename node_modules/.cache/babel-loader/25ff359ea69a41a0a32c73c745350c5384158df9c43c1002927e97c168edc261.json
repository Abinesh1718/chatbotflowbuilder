{"ast":null,"code":"var _jsxFileName = \"/home/abinesh/project/chatbot-flow-builder/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useState } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  textMessage: CustomNode\n};\nconst initialNodes = [{\n  id: '1',\n  type: 'textMessage',\n  data: {\n    label: 'Text Message 1'\n  },\n  position: {\n    x: 250,\n    y: 5\n  }\n}];\nconst initialEdges = [];\nfunction App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const onConnect = params => setEdges(eds => addEdge(params, eds));\n  const onElementClick = (event, element) => setSelectedNode(element);\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach(node => {\n      const nodeEdges = edges.filter(edge => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', {\n        nodes,\n        edges\n      });\n      // Save the flow logic here\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n        children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onElementClick: onElementClick,\n          nodeTypes: nodeTypes,\n          children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Node Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Label: \", selectedNode.data.label]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateFlow,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"fZW6s8qr0uMX7Dhkf3Ze9sqob+E=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","ReactFlowProvider","addEdge","MiniMap","Controls","Background","useNodesState","useEdgesState","CustomNode","jsxDEV","_jsxDEV","Fragment","_Fragment","nodeTypes","textMessage","initialNodes","id","type","data","label","position","x","y","initialEdges","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","onConnect","params","eds","onElementClick","event","element","validateFlow","isValid","forEach","node","nodeEdges","filter","edge","source","target","length","alert","console","log","children","style","height","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["/home/abinesh/project/chatbot-flow-builder/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useState } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\n\nimport './App.css'\n\nconst nodeTypes = {\n  textMessage: CustomNode,\n};\n\nconst initialNodes = [\n  { id: '1', type: 'textMessage', data: { label: 'Text Message 1' }, position: { x: 250, y: 5 } },\n];\n\nconst initialEdges = [];\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const onConnect = (params) => setEdges((eds) => addEdge(params, eds));\n  const onElementClick = (event, element) => setSelectedNode(element);\n\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach((node) => {\n      const nodeEdges = edges.filter((edge) => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', { nodes, edges });\n      // Save the flow logic here\n    }\n  };\n\n  return (\n    <><div style={{ height: '100vh' }}>\n      <ReactFlowProvider>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onElementClick={onElementClick}\n          nodeTypes={nodeTypes}\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n        {selectedNode && (\n          <div className=\"settings-panel\">\n            <h3>Node Settings</h3>\n            <p>Label: {selectedNode.data.label}</p>\n          </div>\n        )}\n\n      </ReactFlowProvider>\n\n    </div><button onClick={validateFlow}>Save</button></>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}