{"ast":null,"code":"var _jsxFileName = \"/home/abinesh/project/chatbot-flow-builder/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  textMessage: CustomNode\n};\nconst initialNodes = [{\n  id: '1',\n  type: 'textMessage',\n  data: {\n    label: 'Text Message 1'\n  },\n  position: {\n    x: 250,\n    y: 5\n  }\n}];\nconst initialEdges = [];\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const onElementClick = useCallback((event, element) => setSelectedNode(element), []);\n  const addNode = () => {\n    const newNode = {\n      id: id.toString(),\n      type: 'textMessage',\n      data: {\n        label: `Text Message ${id}`\n      },\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      }\n    };\n    id++;\n    setNodes(nds => nds.concat(newNode));\n  };\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach(node => {\n      const nodeEdges = edges.filter(edge => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', {\n        nodes,\n        edges\n      });\n      // Save the flow logic here\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        onElementClick: onElementClick,\n        nodeTypes: nodeTypes,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Node Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Label: \", selectedNode.data.label]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: validateFlow,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dgLtHBkVJxC7ZHqXq7K1qVO3I0Q=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","ReactFlowProvider","addEdge","MiniMap","Controls","Background","useNodesState","useEdgesState","CustomNode","jsxDEV","_jsxDEV","nodeTypes","textMessage","initialNodes","id","type","data","label","position","x","y","initialEdges","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","onConnect","params","eds","onElementClick","event","element","addNode","newNode","toString","Math","random","nds","concat","validateFlow","isValid","forEach","node","nodeEdges","filter","edge","source","target","length","alert","console","log","style","height","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["/home/abinesh/project/chatbot-flow-builder/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\n\nimport './App.css';\n\nconst nodeTypes = {\n  textMessage: CustomNode,\n};\n\nconst initialNodes = [\n  { id: '1', type: 'textMessage', data: { label: 'Text Message 1' }, position: { x: 250, y: 5 } },\n];\n\nconst initialEdges = [];\n\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\n  const onElementClick = useCallback((event, element) => setSelectedNode(element), []);\n  \n  const addNode = () => {\n    const newNode = {\n      id: id.toString(),\n      type: 'textMessage',\n      data: { label: `Text Message ${id}` },\n      position: { x: Math.random() * 400, y: Math.random() * 400 },\n    };\n    id++;\n    setNodes((nds) => nds.concat(newNode));\n  };\n\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach((node) => {\n      const nodeEdges = edges.filter((edge) => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', { nodes, edges });\n      // Save the flow logic here\n    }\n  };\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <ReactFlowProvider>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          onElementClick={onElementClick}\n          nodeTypes={nodeTypes}\n        >\n          <MiniMap />\n          <Controls />\n          <Background />\n        </ReactFlow>\n        {selectedNode && (\n          <div className=\"settings-panel\">\n            <h3>Node Settings</h3>\n            <p>Label: {selectedNode.data.label}</p>\n          </div>\n        )}\n        <div className=\"buttons-container\">\n          <button onClick={addNode}>Add Node</button>\n          <button onClick={validateFlow}>Save</button>\n        </div>\n      </ReactFlowProvider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}