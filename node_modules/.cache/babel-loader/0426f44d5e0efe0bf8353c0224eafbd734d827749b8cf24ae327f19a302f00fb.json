{"ast":null,"code":"var _jsxFileName = \"/home/abinesh/project/chatbotflowbuilder/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, Background, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport Button from '@mui/material/Button';\nimport './App.css';\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  textMessage: CustomNode\n  // Add other custom node types here as you develop them\n};\nconst initialNodes = [{\n  id: '1',\n  type: 'textMessage',\n  data: {\n    label: 'Text Message 1'\n  },\n  position: {\n    x: 250,\n    y: 5\n  }\n}];\nconst initialEdges = [];\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  _s();\n  var _selectedNode$data;\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [editedLabel, setEditedLabel] = useState('');\n  const onConnect = params => setEdges(eds => addEdge(params, eds));\n  const onElementClick = (event, element) => {\n    setSelectedNode(element);\n    setEditedLabel(element.data.label); // Update the editedLabel when a node is selected\n  };\n  const addNode = type => {\n    const newNode = {\n      id: id.toString(),\n      type,\n      data: {\n        label: `${type} ${id}`\n      },\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      }\n    };\n    id++;\n    setNodes(nds => [...nds, newNode]);\n  };\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach(node => {\n      const nodeEdges = edges.filter(edge => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', {\n        nodes,\n        edges\n      });\n      // Save the flow logic here\n    }\n  };\n  const handleLabelChange = event => {\n    setEditedLabel(event.target.value);\n  };\n  const updateNodeLabel = () => {\n    if (selectedNode) {\n      const updatedNodes = nodes.map(node => {\n        if (node.id === selectedNode.id) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              label: editedLabel\n            }\n          };\n        }\n        return node;\n      });\n      setNodes(updatedNodes);\n      setSelectedNode(null); // Hide the text box after updating\n      setEditedLabel(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: validateFlow,\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            nodes: nodes.map(node => ({\n              ...node,\n              data: {\n                ...node.data,\n                selected: selectedNode && node.id === selectedNode.id,\n                setSelectedNode\n              }\n            })),\n            edges: edges,\n            onNodesChange: onNodesChange,\n            onEdgesChange: onEdgesChange,\n            onConnect: onConnect,\n            onElementClick: onElementClick,\n            nodeTypes: nodeTypes,\n            children: /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-container\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: () => addNode('textMessage'),\n            children: \"Add Text Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(TextareaAutosize, {\n            \"aria-label\": \"Edit node label\",\n            minRows: 3,\n            placeholder: \"Edit node label\",\n            value: editedLabel ? editedLabel : selectedNode === null || selectedNode === void 0 ? void 0 : (_selectedNode$data = selectedNode.data) === null || _selectedNode$data === void 0 ? void 0 : _selectedNode$data.label,\n            onChange: handleLabelChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: updateNodeLabel,\n            children: \"Update Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MzJaADJSwPuNGFnzbJ/3oN58Gyo=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ReactFlow","ReactFlowProvider","addEdge","Background","useNodesState","useEdgesState","CustomNode","Button","TextareaAutosize","jsxDEV","_jsxDEV","Fragment","_Fragment","nodeTypes","textMessage","initialNodes","id","type","data","label","position","x","y","initialEdges","App","_s","_selectedNode$data","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","editedLabel","setEditedLabel","onConnect","params","eds","onElementClick","event","element","addNode","newNode","toString","Math","random","nds","validateFlow","isValid","forEach","node","nodeEdges","filter","edge","source","target","length","alert","console","log","handleLabelChange","value","updateNodeLabel","updatedNodes","map","style","height","children","variant","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","selected","minRows","placeholder","onChange","_c","$RefreshReg$"],"sources":["/home/abinesh/project/chatbotflowbuilder/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport Button from '@mui/material/Button';\nimport './App.css';\n\nimport TextareaAutosize from '@mui/material/TextareaAutosize';\n\nconst nodeTypes = {\n  textMessage: CustomNode,\n  // Add other custom node types here as you develop them\n};\n\nconst initialNodes = [\n  { id: '1', type: 'textMessage', data: { label: 'Text Message 1' }, position: { x: 250, y: 5 } },\n];\n\nconst initialEdges = [];\n\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [editedLabel, setEditedLabel] = useState('');\n\n  const onConnect = (params) => setEdges((eds) => addEdge(params, eds));\n\n  const onElementClick = (event, element) => {\n    setSelectedNode(element);\n    setEditedLabel(element.data.label); // Update the editedLabel when a node is selected\n  };\n\n  const addNode = (type) => {\n    const newNode = {\n      id: id.toString(),\n      type,\n      data: { label: `${type} ${id}` },\n      position: { x: Math.random() * 400, y: Math.random() * 400 },\n    };\n    id++;\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach((node) => {\n      const nodeEdges = edges.filter((edge) => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', { nodes, edges });\n      // Save the flow logic here\n    }\n  };\n\n  const handleLabelChange = (event) => {\n    setEditedLabel(event.target.value);\n  };\n\n  const updateNodeLabel = () => {\n    if (selectedNode) {\n      const updatedNodes = nodes.map((node) => {\n        if (node.id === selectedNode.id) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              label: editedLabel,\n            },\n          };\n        }\n        return node;\n      });\n      setNodes(updatedNodes);\n      setSelectedNode(null); // Hide the text box after updating\n      setEditedLabel(\"\")\n\n    }\n  };\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <header>\n        <Button variant=\"outlined\" onClick={validateFlow}>Save Changes</Button>\n      </header>\n      <div className=\"container\">\n        <div className=\"main\">\n          <ReactFlowProvider>\n            <ReactFlow\n              nodes={nodes.map((node) => ({\n                ...node,\n                data: {\n                  ...node.data,\n                  selected: selectedNode && node.id === selectedNode.id,\n                  setSelectedNode,\n                },\n              }))}\n              edges={edges}\n              onNodesChange={onNodesChange}\n              onEdgesChange={onEdgesChange}\n              onConnect={onConnect}\n              onElementClick={onElementClick}\n              nodeTypes={nodeTypes}\n            >\n              <Background />\n            </ReactFlow>\n          </ReactFlowProvider>\n        </div>\n        <div className=\"sidebar\">\n          <div className=\"buttons-container\">\n            <Button variant=\"outlined\" onClick={() => addNode('textMessage')}>Add Text Message</Button>\n          </div>\n          {selectedNode && (\n            <>\n              <TextareaAutosize\n                aria-label=\"Edit node label\"\n                minRows={3}\n                placeholder=\"Edit node label\"\n                value={editedLabel ? editedLabel : selectedNode?.data?.label}\n                onChange={handleLabelChange}\n              />\n              <Button variant=\"outlined\" onClick={updateNodeLabel}>Update Label</Button>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}