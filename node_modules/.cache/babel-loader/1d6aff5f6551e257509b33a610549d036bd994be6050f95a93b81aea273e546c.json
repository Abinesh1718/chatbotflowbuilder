{"ast":null,"code":"var _jsxFileName = \"/home/abinesh/project/chatbot-flow-builder/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\n\nimport React, { useState } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  textMessage: CustomNode\n};\nconst initialNodes = [{\n  id: '1',\n  type: 'textMessage',\n  data: {\n    label: 'Text Message 1'\n  },\n  position: {\n    x: 250,\n    y: 5\n  }\n}];\nconst initialEdges = [];\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const onConnect = params => setEdges(eds => addEdge(params, eds));\n  const onElementClick = (event, element) => {\n    setSelectedNode(element), console.log(\"JNLNLN\", event);\n  };\n  const addNode = () => {\n    const newNode = {\n      id: id.toString(),\n      type: 'textMessage',\n      data: {\n        label: `Text Message ${id}`\n      },\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      }\n    };\n    id++;\n    setNodes(nds => [...nds, newNode]);\n  };\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach(node => {\n      const nodeEdges = edges.filter(edge => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', {\n        nodes,\n        edges\n      });\n      // Save the flow logic here\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: validateFlow,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n            nodes: nodes,\n            edges: edges,\n            onNodesChange: onNodesChange,\n            onEdgesChange: onEdgesChange,\n            onConnect: onConnect,\n            onElementClick: onElementClick,\n            nodeTypes: nodeTypes,\n            children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: selectedNode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Node Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Label: \", selectedNode.data.label]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"buttons-container\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: addNode,\n              children: \"Add Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a node to see its settings.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fZW6s8qr0uMX7Dhkf3Ze9sqob+E=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","ReactFlowProvider","addEdge","MiniMap","Controls","Background","useNodesState","useEdgesState","CustomNode","jsxDEV","_jsxDEV","Fragment","_Fragment","nodeTypes","textMessage","initialNodes","id","type","data","label","position","x","y","initialEdges","App","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","onConnect","params","eds","onElementClick","event","element","console","log","addNode","newNode","toString","Math","random","nds","validateFlow","isValid","forEach","node","nodeEdges","filter","edge","source","target","length","alert","style","height","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/home/abinesh/project/chatbot-flow-builder/src/App.js"],"sourcesContent":["// src/App.js\n\nimport React, { useState } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  addEdge,\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n} from 'react-flow-renderer';\nimport CustomNode from './CustomNode';\n\nimport './App.css';\n\nconst nodeTypes = {\n  textMessage: CustomNode,\n};\n\nconst initialNodes = [\n  { id: '1', type: 'textMessage', data: { label: 'Text Message 1' }, position: { x: 250, y: 5 } },\n];\n\nconst initialEdges = [];\n\nlet id = 2; // Incremental ID for new nodes\n\nfunction App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const onConnect = (params) => setEdges((eds) => addEdge(params, eds));\n  const onElementClick = (event, element) => { setSelectedNode(element),console.log(\"JNLNLN\",event);};\n\n  const addNode = () => {\n    const newNode = {\n      id: id.toString(),\n      type: 'textMessage',\n      data: { label: `Text Message ${id}` },\n      position: { x: Math.random() * 400, y: Math.random() * 400 },\n    };\n    id++;\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  const validateFlow = () => {\n    let isValid = true;\n    nodes.forEach((node) => {\n      const nodeEdges = edges.filter((edge) => edge.source === node.id || edge.target === node.id);\n      if (node.type === 'textMessage' && nodeEdges.length === 0) {\n        isValid = false;\n      }\n    });\n    if (!isValid) {\n      alert('Validation failed: Some nodes do not have target handles.');\n    } else {\n      console.log('Flow is valid. Saving flow...', { nodes, edges });\n      // Save the flow logic here\n    }\n  };\n\n  return (\n    <div style={{ height: '100vh' }}>\n      <header>\n        <button onClick={validateFlow}>Save</button>\n      </header>\n      <div className=\"container\">\n        <div className=\"main\">\n          <ReactFlowProvider>\n            <ReactFlow\n              nodes={nodes}\n              edges={edges}\n              onNodesChange={onNodesChange}\n              onEdgesChange={onEdgesChange}\n              onConnect={onConnect}\n              onElementClick={onElementClick}\n              nodeTypes={nodeTypes}\n            >\n              <MiniMap />\n              <Controls />\n              <Background />\n            </ReactFlow>\n\n          </ReactFlowProvider>\n        </div>\n        <div className=\"sidebar\">\n          {selectedNode ? (\n            <>\n              <h3>Node Settings</h3>\n              <p>Label: {selectedNode.data.label}</p>\n              {/* Add more settings controls as needed */}\n            </>\n          ) : (\n\n            <><div className=\"buttons-container\">\n              <button onClick={addNode}>Add Node</button>\n            </div><p>Select a node to see its settings.</p></>\n\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}